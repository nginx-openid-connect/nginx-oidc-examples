# OpenID Connect configuration
#
# Each map block allows multiple values so that multiple IdPs can be supported,
# the $host variable is used as the default input parameter but can be changed.
#
map $host $oidc_authz_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/auth";
    #www.example.com "https://my-idp/oauth2/v1/authorize";
}

map $host $oidc_authz_query_params_option {
    # The option of custom query params in the request of $oidc_authz_endpoint.
    # 0: built-in params (e.g. response_type, client_id, redirect_uri, nonce)
    # 1: extra args($oidc_authz_query_params) are extended after built-in params
    # 2: replace built-in params with custom params($oidc_authz_query_params)
    default 0;
}

map $host $oidc_authz_query_params {
    # Each IdP may use different query params of the $oidc_authz_endpoint. For
    # example, Keycloak can select an IdP to delegate to via the "kc_idp_hint"
    # argument. It must be expressed as query string parameters and URL-encoded
    # if required.
    default "";
    #extra.args.example   "kc_idp_hint=another_provider";
    #replace.args.example "response_type=code&scope=$oidc_scopes&client_id=$oidc_client&redirect_uri=$redirect_base$redir_location&nonce=$nonce_hash&state=0&audience=https://auth0.com/api/v2/";
}

map $host $oidc_token_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/token";
}

map $host $oidc_jwt_keyfile {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/certs";
}

map $host $oidc_logout_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/logout";
}

map $host $oidc_logout_query_params_option {
    # 0: default query params for the RP-initiated logout
    # 1: extra query params is added after the default query params
    # 2: replace default query params with custom query params
    default 0;
}

map $host $oidc_logout_query_params {
    # Each IdP use different query params of the $oidc_logout_endpoint. For
    # example, The Amazon Cognito requires `client_id` and `logout_uri`. The
    # Auth0 requires `client_id` and `returnTo`. If this option is empty, then
    # `post_logout_redirect_uri` and `id_token_hint` are used as default query
    # params, and the AzureAD/Okta/Keycloak/OneLogin/PingIdentity use them.
    default "";
    # www.example.com "client_id=$oidc_client&logout_uri=$redirect_base/_logout";
}

map $host $oidc_userinfo_endpoint {
    default "http://host.docker.internal:8080/auth/realms/master/protocol/openid-connect/userinfo";
}

map $host $oidc_userinfo_required_claims {
    # The $oidc_userinfo_endpoint returns OP's response that contains default or
    # customized claims. This is used for scenarios where the SPA needs to show
    # user name or specific profiles instead of forwarding the response from the
    # OP to the SPA to minimize exposure of user information.
    default "";
    www.example.com "sub,name,preferred_username,given_name,family_name,email,photo";
}

map $host $oidc_client {
    default "my-client-id";
}

map $host $oidc_pkce_enable {
    default 1;
}

map $host $oidc_client_secret {
    default "my-client-secret";
}

map $host $oidc_scopes {
    default "openid+profile+email+offline_access";
}

map $host $oidc_landing_page {
    # Where to send browser after successful login. This option is only 
    # recommended for scenarios where a landing page shows default information
    # without login, and the RP redirects to the landing page after successful
    # login from the OP. If this is empty, then the RP redirects to $request_uri.
    default "";
    www.example.com $redirect_base;
}

map $host $oidc_logout_redirect {
    # This is a RP's callback URI which is called by OP after successful logout.
    default "/_logout"; # Built-in, simple logout page
}

map $host $post_logout_return_uri {
    # Where to send browser after the RP requests /logout to the OP, and after
    # the RP (/_logout) is called by the OP and cleans cookies. The following
    # If this is empty, then the RP redirects to $request_uri.

    default "";

    # Edit if you want to redirect to the landing page
    www.example.com $oidc_landing_page;

    # Edit if you want to redirect to a custom logout page
    #www.example.com $redirect_base/signout;

    # Edit if you want to redirect to an another complete URL
    #www.example.com https://www.nginx.com;
}

map $host $oidc_hmac_key {
    # This should be unique for every NGINX instance/cluster
    default "ChangeMe";
}

map $host $zone_sync_leeway {
    # Specifies the maximum timeout for synchronizing ID tokens between cluster
    # nodes when you use shared memory zone content sync. This option is only
    # recommended for scenarios where cluster nodes can randomly process
    # requests from user agents and there may be a situation where node "A"
    # successfully received a token, and node "B" receives the next request in
    # less than zone_sync_interval.
    default 0; # Time in milliseconds, e.g. (zone_sync_interval * 2 * 1000)
}

map $host $session_cookie_validation_enable {
    default 1; # 1: Enable when blocking API access from anonymous who holds session cookie.
}

map $host $session_cookie_validation_time_format {
    default "mm";
    #hh.example.com "hh"; # session cookie is valid for a specific hour
    #mm.example.com "mm"; # session cookie is valid for a specific minute
}

map $proto $oidc_cookie_flags {
    http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
    https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
}

map $http_x_forwarded_port $redirect_base {
    ""      $proto://$host:$server_port;
    default $proto://$host:$http_x_forwarded_port;
}

map $http_x_forwarded_proto $proto {
    ""      $scheme;
    default $http_x_forwarded_proto;
}

# ADVANCED CONFIGURATION BELOW THIS LINE
# Additional advanced configuration (server context) in openid_connect.server_conf

# JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

# Change timeout values to at least the validity period of each token type
keyval_zone zone=oidc_id_tokens:1M     state=/var/lib/nginx/state/oidc_id_tokens.json     timeout=1h;
keyval_zone zone=oidc_access_tokens:1M state=/var/lib/nginx/state/oidc_access_tokens.json timeout=1h;
keyval_zone zone=refresh_tokens:1M     state=/var/lib/nginx/state/refresh_tokens.json     timeout=8h;
keyval_zone zone=oidc_pkce:128K        timeout=90s; # Temporary storage for PKCE code verifier.
keyval_zone zone=oidc_userinfo:128K    timeout=90s; # Temporary storage for user information.
keyval_zone zone=oidc_pkce_challenge:128K timeout=90s; # Temporary storage for PKCE code challenge.
keyval_zone zone=oidc_nonce:128K timeout=90s; # Temporary storage for nonce.

keyval $cookie_session_id $session_jwt   zone=oidc_id_tokens;     # Exchange cookie for JWT
keyval $cookie_session_id $access_token  zone=oidc_access_tokens; # Exchange cookie for access token
keyval $cookie_session_id $refresh_token zone=refresh_tokens;     # Exchange cookie for refresh token
keyval $session_id $new_session          zone=oidc_id_tokens;     # For initial session creation
keyval $session_id $new_access_token     zone=oidc_access_tokens;
keyval $session_id $new_refresh          zone=refresh_tokens;
keyval $session_id $user_info            zone=oidc_userinfo;
keyval $session_id $nonce_hash           zone=oidc_nonce;
keyval $pkce_id    $pkce_code_verifier   zone=oidc_pkce;
keyval $pkce_id    $pkce_code_challenge  zone=oidc_pkce_challenge;

auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
js_import oidc from conf.d/openid_connect.js;

# vim: syntax=nginx
